/*
Copyright 2023 The Invisinets Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package invisinetspb;

option go_package="github.com/NetSys/invisinets/pkg/invisinetspb";

service CloudPlugin {
    rpc GetUsedAddressSpaces(InvisinetsDeployment) returns (AddressSpaceList) {}
    rpc CreateResource(ResourceDescription) returns (BasicResponse) {}
    rpc GetPermitList(ResourceID) returns (PermitList) {}
    rpc AddPermitListRules(PermitList) returns (BasicResponse) {}
    rpc DeletePermitListRules(PermitList) returns (BasicResponse) {}
}

// Provides the necessary URI/ID to find the Invisinets networks (eg, subscription + resource group in Azure or project in GCP)
message InvisinetsDeployment {
    string id = 1;
}

message RegionAddressSpaceMap {
    string address_space = 1;
    string region = 2;
}

message AddressSpaceList {
    repeated RegionAddressSpaceMap mappings = 1;
}

message ResourceID {
    string id = 1;
}

message ResourceDescription {
    string id = 1;
    bytes description = 2;
    string address_space = 3;
}

message ResourceDescriptionString {
    string id = 1;
    string description = 2;
}

message BasicResponse {
    bool success = 1;
    string message = 2;
    optional ResourceID updated_resource = 3;
}

enum Direction {
    INBOUND = 0;
    OUTBOUND = 1;
}

message PermitListRule {
    string id = 1;
    repeated string tag = 2;
    Direction direction = 3;
    int32 src_port = 4;
    int32 dst_port = 5;
    int32 protocol = 6;
}

message PermitList {
    string associated_resource = 1; 
    repeated PermitListRule rules = 2;
}

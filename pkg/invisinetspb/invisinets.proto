/*
Copyright 2023 The Invisinets Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package invisinetspb;

option go_package="github.com/NetSys/invisinets/pkg/invisinetspb";

service CloudPlugin {
    rpc GetUsedAddressSpaces(GetUsedAddressSpacesRequest) returns (GetUsedAddressSpacesResponse) {}
    rpc GetUsedAsns(GetUsedAsnsRequest) returns (GetUsedAsnsResponse) {}
    rpc GetUsedBgpPeeringIpAddresses(GetUsedBgpPeeringIpAddressesRequest) returns (GetUsedBgpPeeringIpAddressesResponse) {}
    rpc CreateResource(ResourceDescription) returns (CreateResourceResponse) {}
    rpc GetPermitList(GetPermitListRequest) returns (GetPermitListResponse) {}
    rpc AddPermitListRules(AddPermitListRulesRequest) returns (AddPermitListRulesResponse) {}
    rpc DeletePermitListRules(DeletePermitListRulesRequest) returns (DeletePermitListRulesResponse) {}
    rpc CreateVpnGateway(CreateVpnGatewayRequest) returns (CreateVpnGatewayResponse) {}
    rpc CreateVpnConnections(CreateVpnConnectionsRequest) returns (BasicResponse) {}
}

service Controller {
    rpc FindUnusedAddressSpaces(FindUnusedAddressSpacesRequest) returns (FindUnusedAddressSpacesResponse) {}
    rpc GetUsedAddressSpaces(Empty) returns (GetUsedAddressSpacesResponse) {} // TODO @seankimkdy: we should rename either this or the CloudPlugin's to not share the same method name
    rpc FindUnusedAsn(FindUnusedAsnRequest) returns (FindUnusedAsnResponse) {}
    rpc ConnectClouds(ConnectCloudsRequest) returns (BasicResponse) {}
    rpc SetValue(SetValueRequest) returns (SetValueResponse) {}
    rpc GetValue(GetValueRequest) returns (GetValueResponse) {}
    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {}
}

message Empty {

}

message Namespace {
    string namespace = 1;
}

message CreateResourceResponse {
    string name = 1;
    string uri = 2;
    string ip = 3;
}

// Provides the necessary URI/ID to find the Invisinets networks (eg, subscription + resource group in Azure or project in GCP)
message InvisinetsDeployment {
    string id = 1;
    string namespace = 2;
}

message AddressSpaceMapping{
    repeated string address_spaces = 1;
    string cloud = 2;
    string namespace = 3;
    optional string deployment = 4;
}

message AddressSpaceMappingList {
    repeated AddressSpaceMapping address_space_mappings = 1;
}

message ResourceID {
    string id = 1;
    string namespace = 2;
}

message ResourceDescription {
    string id = 1;
    bytes description = 2;
    string namespace = 3;
}

message ResourceDescriptionString {
    string id = 1;
    string name = 2;
    string description = 3;
}

message BasicResponse {
    bool success = 1;
    string message = 2;
    optional ResourceID updated_resource = 3;
}

enum Direction {
    INBOUND = 0;
    OUTBOUND = 1;
}

// TODO ?: have a version of this without the tags field to avoid users setting that at all
message PermitListRule {
    string id = 1;
    string name = 2;
    repeated string targets = 3;
    Direction direction = 4;
    int32 src_port = 5;
    int32 dst_port = 6;
    int32 protocol = 7;
    repeated string tags = 8;
}

message PermitList {
    string associated_resource = 1; 
    repeated PermitListRule rules = 2;
}

message AddPermitListRulesRequest {
    string namespace = 1;
    string resource = 2;
    repeated PermitListRule rules = 3;
}

message AddPermitListRulesResponse {
}

message DeletePermitListRulesRequest {
    string namespace = 1;
    string resource = 2;
    repeated string rule_names = 3;
}

message DeletePermitListRulesResponse {
}

message GetPermitListRequest {
    string namespace = 1;
    string resource = 2;
}

message GetPermitListResponse {
    repeated PermitListRule rules = 1;
}

message ConnectCloudsRequest {
    string cloudA = 1;
    string cloudB = 2;
    string cloudANamespace = 3;
    string cloudBNamespace = 4;
}

// TODO @seankimkdy: check naming of all of these to be as cloud neutral as possible
// TODO @seankmkdy: should all methods have a {method name}Request and {method name}Response message buffers

message CreateVpnGatewayRequest {
    InvisinetsDeployment deployment = 1;
    string cloud = 2;
    repeated string bgp_peering_ip_addresses = 3;
}

message CreateVpnGatewayResponse {
    uint32 asn = 1;
    repeated string gateway_ip_addresses = 2;
}

message CreateVpnConnectionsRequest {
    InvisinetsDeployment deployment = 1;
    string cloud = 2;
    uint32 asn = 3;
    repeated string gateway_ip_addresses = 4;
    repeated string bgp_ip_addresses = 5;
    string shared_key = 6;
}

message GetUsedAddressSpacesRequest{
    repeated InvisinetsDeployment deployments = 1;
}

message GetUsedAddressSpacesResponse{
    // NOTE: this is shared by both the CloudPlugin and Controller
    repeated AddressSpaceMapping address_space_mappings = 1;
}

message GetUsedAsnsRequest {
    repeated InvisinetsDeployment deployments = 1;
}

message GetUsedAsnsResponse {
    repeated uint32 asns = 1; // Currently APIs only return one ASN since it's per namespace but it may change in the future
}

message GetUsedBgpPeeringIpAddressesRequest {
    repeated InvisinetsDeployment deployments = 1;
}

message GetUsedBgpPeeringIpAddressesResponse {
    repeated string ip_addresses = 1;
}

message FindUnusedAddressSpacesRequest {
    optional int32 num = 2;
}

message FindUnusedAddressSpacesResponse {
    repeated string address_spaces = 1;
}

message FindUnusedAsnRequest {

}

message FindUnusedAsnResponse {
    uint32 asn = 1;
}

message SetValueRequest {
    string key = 1;
    string value = 2;
    string cloud = 3;
    string namespace = 4;
}

message SetValueResponse {
}

message GetValueRequest {
    string key = 1;
    string cloud = 2;
    string namespace = 3;
}

message GetValueResponse {
    string value = 1;
}

message DeleteValueRequest {
    string key = 1;
    string cloud = 2;
    string namespace = 3;
}

message DeleteValueResponse {
}




/*
Copyright 2023 The Invisinets Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package invisinetspb;

option go_package="github.com/NetSys/invisinets/pkg/invisinetspb";

service CloudPlugin {
    rpc GetUsedAddressSpaces(InvisinetsDeployment) returns (AddressSpaceList) {}
    rpc CreateResource(ResourceDescription) returns (CreateResourceResponse) {}
    rpc GetPermitList(ResourceID) returns (PermitList) {}
    rpc AddPermitListRules(PermitList) returns (BasicResponse) {}
    rpc DeletePermitListRules(PermitList) returns (BasicResponse) {}
    rpc CreateVpnGateway(InvisinetsDeployment) returns (CreateVpnGatewayResponse) {}
    rpc CreateVpnBgpSessions(CreateVpnBgpSessionsRequest) returns (CreateVpnBgpSessionsResponse) {}
    rpc CreateVpnConnections(CreateVpnConnectionsRequest) returns (BasicResponse) {}
}

service Controller {
    rpc FindUnusedAddressSpace(Namespace) returns (AddressSpace) {}
    rpc GetUsedAddressSpaces(Namespace) returns (AddressSpaceMappingList) {}
    rpc ConnectClouds(ConnectCloudsRequest) returns (BasicResponse) {}
}

message Empty {

}

message Namespace {
    string namespace = 1;
}

message CreateResourceResponse {
    string name = 1;
    string uri = 2;
    string ip = 3;
}

// Provides the necessary URI/ID to find the Invisinets networks (eg, subscription + resource group in Azure or project in GCP)
message InvisinetsDeployment {
    string id = 1;
    string namespace = 2;
}

message AddressSpace {
    string address = 1;
}

message AddressSpaceList {
    repeated string address_spaces = 1;
}

message AddressSpaceMapping{
    repeated string address_spaces = 1;
    string cloud = 2;
    string namespace = 3;
}

message AddressSpaceMappingList {
    repeated AddressSpaceMapping address_space_mappings = 1;
}

message ResourceID {
    string id = 1;
    string namespace = 2;
}

message ResourceDescription {
    string id = 1;
    bytes description = 2;
    string namespace = 3;
}

message ResourceDescriptionString {
    string id = 1;
    string description = 2;
}

message BasicResponse {
    bool success = 1;
    string message = 2;
    optional ResourceID updated_resource = 3;
}

enum Direction {
    INBOUND = 0;
    OUTBOUND = 1;
}

// TODO ?: have a version of this without the tags field to avoid users setting that at all
message PermitListRule {
    string id = 1;
    repeated string targets = 2;
    Direction direction = 3;
    int32 src_port = 4;
    int32 dst_port = 5;
    int32 protocol = 6;
    repeated string tags = 7;
}

message PermitList {
    string associated_resource = 1; 
    repeated PermitListRule rules = 2;
    string namespace = 3;
}

message ConnectCloudsRequest{
    string cloudA = 1;
    string cloudB = 2;
    string cloudANamespace = 3;
    string cloudBNamespace = 4;
}

// TODO @seankimkdy: check naming of all of these to be as cloud neutral as possible
// TODO @seankmkdy: should all methods have a {method name}Request and {method name}Response message buffers

message CreateVpnGatewayResponse{
    repeated string gateway_ip_addresses = 1;
    int64 asn = 2;
}

message CreateVpnBgpSessionsRequest {
    InvisinetsDeployment deployment = 1;
    string cloud = 2;
}

message CreateVpnBgpSessionsResponse {
    repeated string bgp_ip_addresses = 1;
}

message CreateVpnConnectionsRequest{
    InvisinetsDeployment deployment = 1;
    string cloud = 2;
    int64 asn = 3;
    repeated string gateway_ip_addresses = 4;
    repeated string bgp_ip_addresses = 5;
    string shared_key = 6;
}

//
//Copyright 2023 The Invisinets Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: pluginpb/cloudplugin.proto

package pluginpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudPlugin_GetUsedAddressSpaces_FullMethodName  = "/pluginpb.CloudPlugin/GetUsedAddressSpaces"
	CloudPlugin_CreateResource_FullMethodName        = "/pluginpb.CloudPlugin/CreateResource"
	CloudPlugin_GetPermitList_FullMethodName         = "/pluginpb.CloudPlugin/GetPermitList"
	CloudPlugin_AddPermitListRules_FullMethodName    = "/pluginpb.CloudPlugin/AddPermitListRules"
	CloudPlugin_DeletePermitListRules_FullMethodName = "/pluginpb.CloudPlugin/DeletePermitListRules"
	CloudPlugin_CreateVpnGateway_FullMethodName      = "/pluginpb.CloudPlugin/CreateVpnGateway"
	CloudPlugin_CreateVpnBgpSessions_FullMethodName  = "/pluginpb.CloudPlugin/CreateVpnBgpSessions"
	CloudPlugin_CreateVpnConnections_FullMethodName  = "/pluginpb.CloudPlugin/CreateVpnConnections"
)

// CloudPluginClient is the client API for CloudPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudPluginClient interface {
	GetUsedAddressSpaces(ctx context.Context, in *GetUsedAddressSpacesRequest, opts ...grpc.CallOption) (*GetUsedAddressSpacesResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	GetPermitList(ctx context.Context, in *GetPermitListRequest, opts ...grpc.CallOption) (*GetPermitListResponse, error)
	AddPermitListRules(ctx context.Context, in *AddPermitListRulesRequest, opts ...grpc.CallOption) (*AddPermitListRulesResponse, error)
	DeletePermitListRules(ctx context.Context, in *DeletePermitListRulesRequest, opts ...grpc.CallOption) (*DeletePermitListRulesResponse, error)
	CreateVpnGateway(ctx context.Context, in *CreateVpnGatewayRequest, opts ...grpc.CallOption) (*CreateVpnGatewayResponse, error)
	CreateVpnBgpSessions(ctx context.Context, in *CreateVpnBgpSessionsRequest, opts ...grpc.CallOption) (*CreateVpnBgpSessionsResponse, error)
	CreateVpnConnections(ctx context.Context, in *CreateVpnConnectionsRequest, opts ...grpc.CallOption) (*CreateVpnConnectionsResponse, error)
}

type cloudPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudPluginClient(cc grpc.ClientConnInterface) CloudPluginClient {
	return &cloudPluginClient{cc}
}

func (c *cloudPluginClient) GetUsedAddressSpaces(ctx context.Context, in *GetUsedAddressSpacesRequest, opts ...grpc.CallOption) (*GetUsedAddressSpacesResponse, error) {
	out := new(GetUsedAddressSpacesResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_GetUsedAddressSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) GetPermitList(ctx context.Context, in *GetPermitListRequest, opts ...grpc.CallOption) (*GetPermitListResponse, error) {
	out := new(GetPermitListResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_GetPermitList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) AddPermitListRules(ctx context.Context, in *AddPermitListRulesRequest, opts ...grpc.CallOption) (*AddPermitListRulesResponse, error) {
	out := new(AddPermitListRulesResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_AddPermitListRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) DeletePermitListRules(ctx context.Context, in *DeletePermitListRulesRequest, opts ...grpc.CallOption) (*DeletePermitListRulesResponse, error) {
	out := new(DeletePermitListRulesResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_DeletePermitListRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) CreateVpnGateway(ctx context.Context, in *CreateVpnGatewayRequest, opts ...grpc.CallOption) (*CreateVpnGatewayResponse, error) {
	out := new(CreateVpnGatewayResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_CreateVpnGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) CreateVpnBgpSessions(ctx context.Context, in *CreateVpnBgpSessionsRequest, opts ...grpc.CallOption) (*CreateVpnBgpSessionsResponse, error) {
	out := new(CreateVpnBgpSessionsResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_CreateVpnBgpSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudPluginClient) CreateVpnConnections(ctx context.Context, in *CreateVpnConnectionsRequest, opts ...grpc.CallOption) (*CreateVpnConnectionsResponse, error) {
	out := new(CreateVpnConnectionsResponse)
	err := c.cc.Invoke(ctx, CloudPlugin_CreateVpnConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudPluginServer is the server API for CloudPlugin service.
// All implementations must embed UnimplementedCloudPluginServer
// for forward compatibility
type CloudPluginServer interface {
	GetUsedAddressSpaces(context.Context, *GetUsedAddressSpacesRequest) (*GetUsedAddressSpacesResponse, error)
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	GetPermitList(context.Context, *GetPermitListRequest) (*GetPermitListResponse, error)
	AddPermitListRules(context.Context, *AddPermitListRulesRequest) (*AddPermitListRulesResponse, error)
	DeletePermitListRules(context.Context, *DeletePermitListRulesRequest) (*DeletePermitListRulesResponse, error)
	CreateVpnGateway(context.Context, *CreateVpnGatewayRequest) (*CreateVpnGatewayResponse, error)
	CreateVpnBgpSessions(context.Context, *CreateVpnBgpSessionsRequest) (*CreateVpnBgpSessionsResponse, error)
	CreateVpnConnections(context.Context, *CreateVpnConnectionsRequest) (*CreateVpnConnectionsResponse, error)
	mustEmbedUnimplementedCloudPluginServer()
}

// UnimplementedCloudPluginServer must be embedded to have forward compatible implementations.
type UnimplementedCloudPluginServer struct {
}

func (UnimplementedCloudPluginServer) GetUsedAddressSpaces(context.Context, *GetUsedAddressSpacesRequest) (*GetUsedAddressSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsedAddressSpaces not implemented")
}
func (UnimplementedCloudPluginServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedCloudPluginServer) GetPermitList(context.Context, *GetPermitListRequest) (*GetPermitListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermitList not implemented")
}
func (UnimplementedCloudPluginServer) AddPermitListRules(context.Context, *AddPermitListRulesRequest) (*AddPermitListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermitListRules not implemented")
}
func (UnimplementedCloudPluginServer) DeletePermitListRules(context.Context, *DeletePermitListRulesRequest) (*DeletePermitListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermitListRules not implemented")
}
func (UnimplementedCloudPluginServer) CreateVpnGateway(context.Context, *CreateVpnGatewayRequest) (*CreateVpnGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnGateway not implemented")
}
func (UnimplementedCloudPluginServer) CreateVpnBgpSessions(context.Context, *CreateVpnBgpSessionsRequest) (*CreateVpnBgpSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnBgpSessions not implemented")
}
func (UnimplementedCloudPluginServer) CreateVpnConnections(context.Context, *CreateVpnConnectionsRequest) (*CreateVpnConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnConnections not implemented")
}
func (UnimplementedCloudPluginServer) mustEmbedUnimplementedCloudPluginServer() {}

// UnsafeCloudPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudPluginServer will
// result in compilation errors.
type UnsafeCloudPluginServer interface {
	mustEmbedUnimplementedCloudPluginServer()
}

func RegisterCloudPluginServer(s grpc.ServiceRegistrar, srv CloudPluginServer) {
	s.RegisterService(&CloudPlugin_ServiceDesc, srv)
}

func _CloudPlugin_GetUsedAddressSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsedAddressSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).GetUsedAddressSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_GetUsedAddressSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).GetUsedAddressSpaces(ctx, req.(*GetUsedAddressSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_GetPermitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermitListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).GetPermitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_GetPermitList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).GetPermitList(ctx, req.(*GetPermitListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_AddPermitListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermitListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).AddPermitListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_AddPermitListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).AddPermitListRules(ctx, req.(*AddPermitListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_DeletePermitListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermitListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).DeletePermitListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_DeletePermitListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).DeletePermitListRules(ctx, req.(*DeletePermitListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_CreateVpnGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).CreateVpnGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_CreateVpnGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).CreateVpnGateway(ctx, req.(*CreateVpnGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_CreateVpnBgpSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnBgpSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).CreateVpnBgpSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_CreateVpnBgpSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).CreateVpnBgpSessions(ctx, req.(*CreateVpnBgpSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudPlugin_CreateVpnConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudPluginServer).CreateVpnConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudPlugin_CreateVpnConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudPluginServer).CreateVpnConnections(ctx, req.(*CreateVpnConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudPlugin_ServiceDesc is the grpc.ServiceDesc for CloudPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginpb.CloudPlugin",
	HandlerType: (*CloudPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsedAddressSpaces",
			Handler:    _CloudPlugin_GetUsedAddressSpaces_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _CloudPlugin_CreateResource_Handler,
		},
		{
			MethodName: "GetPermitList",
			Handler:    _CloudPlugin_GetPermitList_Handler,
		},
		{
			MethodName: "AddPermitListRules",
			Handler:    _CloudPlugin_AddPermitListRules_Handler,
		},
		{
			MethodName: "DeletePermitListRules",
			Handler:    _CloudPlugin_DeletePermitListRules_Handler,
		},
		{
			MethodName: "CreateVpnGateway",
			Handler:    _CloudPlugin_CreateVpnGateway_Handler,
		},
		{
			MethodName: "CreateVpnBgpSessions",
			Handler:    _CloudPlugin_CreateVpnBgpSessions_Handler,
		},
		{
			MethodName: "CreateVpnConnections",
			Handler:    _CloudPlugin_CreateVpnConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginpb/cloudplugin.proto",
}

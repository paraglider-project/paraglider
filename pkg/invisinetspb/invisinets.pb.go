//
//Copyright 2023 The Invisinets Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: invisinets.proto

package invisinetspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_INBOUND  Direction = 0
	Direction_OUTBOUND Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "INBOUND",
		1: "OUTBOUND",
	}
	Direction_value = map[string]int32{
		"INBOUND":  0,
		"OUTBOUND": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_invisinets_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_invisinets_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{0}
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{1}
}

func (x *Namespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CreateResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CreateResourceResponse) Reset() {
	*x = CreateResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceResponse) ProtoMessage() {}

func (x *CreateResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceResponse.ProtoReflect.Descriptor instead.
func (*CreateResourceResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{2}
}

func (x *CreateResourceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateResourceResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CreateResourceResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Provides the necessary URI/ID to find the Invisinets networks (eg, subscription + resource group in Azure or project in GCP)
type InvisinetsDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *InvisinetsDeployment) Reset() {
	*x = InvisinetsDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvisinetsDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvisinetsDeployment) ProtoMessage() {}

func (x *InvisinetsDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvisinetsDeployment.ProtoReflect.Descriptor instead.
func (*InvisinetsDeployment) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{3}
}

func (x *InvisinetsDeployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvisinetsDeployment) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type AddressSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddressSpace) Reset() {
	*x = AddressSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpace) ProtoMessage() {}

func (x *AddressSpace) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpace.ProtoReflect.Descriptor instead.
func (*AddressSpace) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{4}
}

func (x *AddressSpace) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddressSpaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressSpaces []string `protobuf:"bytes,1,rep,name=address_spaces,json=addressSpaces,proto3" json:"address_spaces,omitempty"`
}

func (x *AddressSpaceList) Reset() {
	*x = AddressSpaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpaceList) ProtoMessage() {}

func (x *AddressSpaceList) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpaceList.ProtoReflect.Descriptor instead.
func (*AddressSpaceList) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{5}
}

func (x *AddressSpaceList) GetAddressSpaces() []string {
	if x != nil {
		return x.AddressSpaces
	}
	return nil
}

type AddressSpaceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressSpaces []string `protobuf:"bytes,1,rep,name=address_spaces,json=addressSpaces,proto3" json:"address_spaces,omitempty"`
	Cloud         string   `protobuf:"bytes,2,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Namespace     string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *AddressSpaceMapping) Reset() {
	*x = AddressSpaceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpaceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpaceMapping) ProtoMessage() {}

func (x *AddressSpaceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpaceMapping.ProtoReflect.Descriptor instead.
func (*AddressSpaceMapping) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{6}
}

func (x *AddressSpaceMapping) GetAddressSpaces() []string {
	if x != nil {
		return x.AddressSpaces
	}
	return nil
}

func (x *AddressSpaceMapping) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *AddressSpaceMapping) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type AddressSpaceMappingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressSpaceMappings []*AddressSpaceMapping `protobuf:"bytes,1,rep,name=address_space_mappings,json=addressSpaceMappings,proto3" json:"address_space_mappings,omitempty"`
}

func (x *AddressSpaceMappingList) Reset() {
	*x = AddressSpaceMappingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpaceMappingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpaceMappingList) ProtoMessage() {}

func (x *AddressSpaceMappingList) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpaceMappingList.ProtoReflect.Descriptor instead.
func (*AddressSpaceMappingList) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{7}
}

func (x *AddressSpaceMappingList) GetAddressSpaceMappings() []*AddressSpaceMapping {
	if x != nil {
		return x.AddressSpaceMappings
	}
	return nil
}

type ResourceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ResourceID) Reset() {
	*x = ResourceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceID) ProtoMessage() {}

func (x *ResourceID) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceID.ProtoReflect.Descriptor instead.
func (*ResourceID) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceID) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ResourceDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description []byte `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ResourceDescription) Reset() {
	*x = ResourceDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDescription) ProtoMessage() {}

func (x *ResourceDescription) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDescription.ProtoReflect.Descriptor instead.
func (*ResourceDescription) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceDescription) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ResourceDescription) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ResourceDescriptionString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ResourceDescriptionString) Reset() {
	*x = ResourceDescriptionString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDescriptionString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDescriptionString) ProtoMessage() {}

func (x *ResourceDescriptionString) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDescriptionString.ProtoReflect.Descriptor instead.
func (*ResourceDescriptionString) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{10}
}

func (x *ResourceDescriptionString) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceDescriptionString) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UpdatedResource *ResourceID `protobuf:"bytes,3,opt,name=updated_resource,json=updatedResource,proto3,oneof" json:"updated_resource,omitempty"`
}

func (x *BasicResponse) Reset() {
	*x = BasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicResponse) ProtoMessage() {}

func (x *BasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicResponse.ProtoReflect.Descriptor instead.
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{11}
}

func (x *BasicResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BasicResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BasicResponse) GetUpdatedResource() *ResourceID {
	if x != nil {
		return x.UpdatedResource
	}
	return nil
}

// TODO ?: have a version of this without the tags field to avoid users setting that at all
type PermitListRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Targets   []string  `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	Direction Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=invisinetspb.Direction" json:"direction,omitempty"`
	SrcPort   int32     `protobuf:"varint,4,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort   int32     `protobuf:"varint,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Protocol  int32     `protobuf:"varint,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Tags      []string  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PermitListRule) Reset() {
	*x = PermitListRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermitListRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermitListRule) ProtoMessage() {}

func (x *PermitListRule) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermitListRule.ProtoReflect.Descriptor instead.
func (*PermitListRule) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{12}
}

func (x *PermitListRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermitListRule) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *PermitListRule) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_INBOUND
}

func (x *PermitListRule) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *PermitListRule) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *PermitListRule) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *PermitListRule) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PermitList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociatedResource string            `protobuf:"bytes,1,opt,name=associated_resource,json=associatedResource,proto3" json:"associated_resource,omitempty"`
	Rules              []*PermitListRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	Namespace          string            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PermitList) Reset() {
	*x = PermitList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermitList) ProtoMessage() {}

func (x *PermitList) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermitList.ProtoReflect.Descriptor instead.
func (*PermitList) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{13}
}

func (x *PermitList) GetAssociatedResource() string {
	if x != nil {
		return x.AssociatedResource
	}
	return ""
}

func (x *PermitList) GetRules() []*PermitListRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *PermitList) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ConnectCloudsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudA          string `protobuf:"bytes,1,opt,name=cloudA,proto3" json:"cloudA,omitempty"`
	CloudB          string `protobuf:"bytes,2,opt,name=cloudB,proto3" json:"cloudB,omitempty"`
	CloudANamespace string `protobuf:"bytes,3,opt,name=cloudANamespace,proto3" json:"cloudANamespace,omitempty"`
	CloudBNamespace string `protobuf:"bytes,4,opt,name=cloudBNamespace,proto3" json:"cloudBNamespace,omitempty"`
}

func (x *ConnectCloudsRequest) Reset() {
	*x = ConnectCloudsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectCloudsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectCloudsRequest) ProtoMessage() {}

func (x *ConnectCloudsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectCloudsRequest.ProtoReflect.Descriptor instead.
func (*ConnectCloudsRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectCloudsRequest) GetCloudA() string {
	if x != nil {
		return x.CloudA
	}
	return ""
}

func (x *ConnectCloudsRequest) GetCloudB() string {
	if x != nil {
		return x.CloudB
	}
	return ""
}

func (x *ConnectCloudsRequest) GetCloudANamespace() string {
	if x != nil {
		return x.CloudANamespace
	}
	return ""
}

func (x *ConnectCloudsRequest) GetCloudBNamespace() string {
	if x != nil {
		return x.CloudBNamespace
	}
	return ""
}

type CreateVpnGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment            *InvisinetsDeployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Cloud                 string                `protobuf:"bytes,2,opt,name=cloud,proto3" json:"cloud,omitempty"`
	BgpPeeringIpAddresses []string              `protobuf:"bytes,3,rep,name=bgp_peering_ip_addresses,json=bgpPeeringIpAddresses,proto3" json:"bgp_peering_ip_addresses,omitempty"`
}

func (x *CreateVpnGatewayRequest) Reset() {
	*x = CreateVpnGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVpnGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnGatewayRequest) ProtoMessage() {}

func (x *CreateVpnGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnGatewayRequest.ProtoReflect.Descriptor instead.
func (*CreateVpnGatewayRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{15}
}

func (x *CreateVpnGatewayRequest) GetDeployment() *InvisinetsDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *CreateVpnGatewayRequest) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *CreateVpnGatewayRequest) GetBgpPeeringIpAddresses() []string {
	if x != nil {
		return x.BgpPeeringIpAddresses
	}
	return nil
}

type CreateVpnGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn                uint32   `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	GatewayIpAddresses []string `protobuf:"bytes,2,rep,name=gateway_ip_addresses,json=gatewayIpAddresses,proto3" json:"gateway_ip_addresses,omitempty"`
}

func (x *CreateVpnGatewayResponse) Reset() {
	*x = CreateVpnGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVpnGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnGatewayResponse) ProtoMessage() {}

func (x *CreateVpnGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnGatewayResponse.ProtoReflect.Descriptor instead.
func (*CreateVpnGatewayResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{16}
}

func (x *CreateVpnGatewayResponse) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *CreateVpnGatewayResponse) GetGatewayIpAddresses() []string {
	if x != nil {
		return x.GatewayIpAddresses
	}
	return nil
}

type CreateVpnConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment         *InvisinetsDeployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Cloud              string                `protobuf:"bytes,2,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Asn                uint32                `protobuf:"varint,3,opt,name=asn,proto3" json:"asn,omitempty"`
	GatewayIpAddresses []string              `protobuf:"bytes,4,rep,name=gateway_ip_addresses,json=gatewayIpAddresses,proto3" json:"gateway_ip_addresses,omitempty"`
	BgpIpAddresses     []string              `protobuf:"bytes,5,rep,name=bgp_ip_addresses,json=bgpIpAddresses,proto3" json:"bgp_ip_addresses,omitempty"`
	SharedKey          string                `protobuf:"bytes,6,opt,name=shared_key,json=sharedKey,proto3" json:"shared_key,omitempty"`
}

func (x *CreateVpnConnectionsRequest) Reset() {
	*x = CreateVpnConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVpnConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnConnectionsRequest) ProtoMessage() {}

func (x *CreateVpnConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnConnectionsRequest.ProtoReflect.Descriptor instead.
func (*CreateVpnConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{17}
}

func (x *CreateVpnConnectionsRequest) GetDeployment() *InvisinetsDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *CreateVpnConnectionsRequest) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *CreateVpnConnectionsRequest) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *CreateVpnConnectionsRequest) GetGatewayIpAddresses() []string {
	if x != nil {
		return x.GatewayIpAddresses
	}
	return nil
}

func (x *CreateVpnConnectionsRequest) GetBgpIpAddresses() []string {
	if x != nil {
		return x.BgpIpAddresses
	}
	return nil
}

func (x *CreateVpnConnectionsRequest) GetSharedKey() string {
	if x != nil {
		return x.SharedKey
	}
	return ""
}

type GetUsedAsnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *InvisinetsDeployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetUsedAsnsRequest) Reset() {
	*x = GetUsedAsnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsedAsnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsedAsnsRequest) ProtoMessage() {}

func (x *GetUsedAsnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsedAsnsRequest.ProtoReflect.Descriptor instead.
func (*GetUsedAsnsRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{18}
}

func (x *GetUsedAsnsRequest) GetDeployment() *InvisinetsDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetUsedAsnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asns []uint32 `protobuf:"varint,1,rep,packed,name=asns,proto3" json:"asns,omitempty"` // Currently APIs only return one ASN since it's per namespace but it may change in the future
}

func (x *GetUsedAsnsResponse) Reset() {
	*x = GetUsedAsnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsedAsnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsedAsnsResponse) ProtoMessage() {}

func (x *GetUsedAsnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsedAsnsResponse.ProtoReflect.Descriptor instead.
func (*GetUsedAsnsResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{19}
}

func (x *GetUsedAsnsResponse) GetAsns() []uint32 {
	if x != nil {
		return x.Asns
	}
	return nil
}

type GetUsedBgpPeeringIpAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *InvisinetsDeployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetUsedBgpPeeringIpAddressesRequest) Reset() {
	*x = GetUsedBgpPeeringIpAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsedBgpPeeringIpAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsedBgpPeeringIpAddressesRequest) ProtoMessage() {}

func (x *GetUsedBgpPeeringIpAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsedBgpPeeringIpAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetUsedBgpPeeringIpAddressesRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{20}
}

func (x *GetUsedBgpPeeringIpAddressesRequest) GetDeployment() *InvisinetsDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetUsedBgpPeeringIpAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddresses []string `protobuf:"bytes,1,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (x *GetUsedBgpPeeringIpAddressesResponse) Reset() {
	*x = GetUsedBgpPeeringIpAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsedBgpPeeringIpAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsedBgpPeeringIpAddressesResponse) ProtoMessage() {}

func (x *GetUsedBgpPeeringIpAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsedBgpPeeringIpAddressesResponse.ProtoReflect.Descriptor instead.
func (*GetUsedBgpPeeringIpAddressesResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{21}
}

func (x *GetUsedBgpPeeringIpAddressesResponse) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

type FindUnusedAsnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FindUnusedAsnRequest) Reset() {
	*x = FindUnusedAsnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUnusedAsnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUnusedAsnRequest) ProtoMessage() {}

func (x *FindUnusedAsnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUnusedAsnRequest.ProtoReflect.Descriptor instead.
func (*FindUnusedAsnRequest) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{22}
}

func (x *FindUnusedAsnRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type FindUnusedAsnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
}

func (x *FindUnusedAsnResponse) Reset() {
	*x = FindUnusedAsnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_invisinets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUnusedAsnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUnusedAsnResponse) ProtoMessage() {}

func (x *FindUnusedAsnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_invisinets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUnusedAsnResponse.ProtoReflect.Descriptor instead.
func (*FindUnusedAsnResponse) Descriptor() ([]byte, []int) {
	return file_invisinets_proto_rawDescGZIP(), []int{23}
}

func (x *FindUnusedAsnResponse) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

var File_invisinets_proto protoreflect.FileDescriptor

var file_invisinets_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x22, 0x44, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x70, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x72, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x16,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x65, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x62,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70,
	0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x73, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73,
	0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x67, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x67,
	0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x41, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x73, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x73, 0x6e, 0x73,
	0x22, 0x69, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73,
	0x69, 0x6e, 0x65, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x15,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x2a, 0x26, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x32,
	0xd7, 0x06, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74,
	0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x69,
	0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x6e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e,
	0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x6e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x29, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe7, 0x02, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x73, 0x6e, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74,
	0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x73,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73,
	0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x41, 0x73, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x12, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x74,
	0x73, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x65, 0x74, 0x53, 0x79, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_invisinets_proto_rawDescOnce sync.Once
	file_invisinets_proto_rawDescData = file_invisinets_proto_rawDesc
)

func file_invisinets_proto_rawDescGZIP() []byte {
	file_invisinets_proto_rawDescOnce.Do(func() {
		file_invisinets_proto_rawDescData = protoimpl.X.CompressGZIP(file_invisinets_proto_rawDescData)
	})
	return file_invisinets_proto_rawDescData
}

var file_invisinets_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_invisinets_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_invisinets_proto_goTypes = []interface{}{
	(Direction)(0),                               // 0: invisinetspb.Direction
	(*Empty)(nil),                                // 1: invisinetspb.Empty
	(*Namespace)(nil),                            // 2: invisinetspb.Namespace
	(*CreateResourceResponse)(nil),               // 3: invisinetspb.CreateResourceResponse
	(*InvisinetsDeployment)(nil),                 // 4: invisinetspb.InvisinetsDeployment
	(*AddressSpace)(nil),                         // 5: invisinetspb.AddressSpace
	(*AddressSpaceList)(nil),                     // 6: invisinetspb.AddressSpaceList
	(*AddressSpaceMapping)(nil),                  // 7: invisinetspb.AddressSpaceMapping
	(*AddressSpaceMappingList)(nil),              // 8: invisinetspb.AddressSpaceMappingList
	(*ResourceID)(nil),                           // 9: invisinetspb.ResourceID
	(*ResourceDescription)(nil),                  // 10: invisinetspb.ResourceDescription
	(*ResourceDescriptionString)(nil),            // 11: invisinetspb.ResourceDescriptionString
	(*BasicResponse)(nil),                        // 12: invisinetspb.BasicResponse
	(*PermitListRule)(nil),                       // 13: invisinetspb.PermitListRule
	(*PermitList)(nil),                           // 14: invisinetspb.PermitList
	(*ConnectCloudsRequest)(nil),                 // 15: invisinetspb.ConnectCloudsRequest
	(*CreateVpnGatewayRequest)(nil),              // 16: invisinetspb.CreateVpnGatewayRequest
	(*CreateVpnGatewayResponse)(nil),             // 17: invisinetspb.CreateVpnGatewayResponse
	(*CreateVpnConnectionsRequest)(nil),          // 18: invisinetspb.CreateVpnConnectionsRequest
	(*GetUsedAsnsRequest)(nil),                   // 19: invisinetspb.GetUsedAsnsRequest
	(*GetUsedAsnsResponse)(nil),                  // 20: invisinetspb.GetUsedAsnsResponse
	(*GetUsedBgpPeeringIpAddressesRequest)(nil),  // 21: invisinetspb.GetUsedBgpPeeringIpAddressesRequest
	(*GetUsedBgpPeeringIpAddressesResponse)(nil), // 22: invisinetspb.GetUsedBgpPeeringIpAddressesResponse
	(*FindUnusedAsnRequest)(nil),                 // 23: invisinetspb.FindUnusedAsnRequest
	(*FindUnusedAsnResponse)(nil),                // 24: invisinetspb.FindUnusedAsnResponse
}
var file_invisinets_proto_depIdxs = []int32{
	7,  // 0: invisinetspb.AddressSpaceMappingList.address_space_mappings:type_name -> invisinetspb.AddressSpaceMapping
	9,  // 1: invisinetspb.BasicResponse.updated_resource:type_name -> invisinetspb.ResourceID
	0,  // 2: invisinetspb.PermitListRule.direction:type_name -> invisinetspb.Direction
	13, // 3: invisinetspb.PermitList.rules:type_name -> invisinetspb.PermitListRule
	4,  // 4: invisinetspb.CreateVpnGatewayRequest.deployment:type_name -> invisinetspb.InvisinetsDeployment
	4,  // 5: invisinetspb.CreateVpnConnectionsRequest.deployment:type_name -> invisinetspb.InvisinetsDeployment
	4,  // 6: invisinetspb.GetUsedAsnsRequest.deployment:type_name -> invisinetspb.InvisinetsDeployment
	4,  // 7: invisinetspb.GetUsedBgpPeeringIpAddressesRequest.deployment:type_name -> invisinetspb.InvisinetsDeployment
	4,  // 8: invisinetspb.CloudPlugin.GetUsedAddressSpaces:input_type -> invisinetspb.InvisinetsDeployment
	19, // 9: invisinetspb.CloudPlugin.GetUsedAsns:input_type -> invisinetspb.GetUsedAsnsRequest
	21, // 10: invisinetspb.CloudPlugin.GetUsedBgpPeeringIpAddresses:input_type -> invisinetspb.GetUsedBgpPeeringIpAddressesRequest
	10, // 11: invisinetspb.CloudPlugin.CreateResource:input_type -> invisinetspb.ResourceDescription
	9,  // 12: invisinetspb.CloudPlugin.GetPermitList:input_type -> invisinetspb.ResourceID
	14, // 13: invisinetspb.CloudPlugin.AddPermitListRules:input_type -> invisinetspb.PermitList
	14, // 14: invisinetspb.CloudPlugin.DeletePermitListRules:input_type -> invisinetspb.PermitList
	16, // 15: invisinetspb.CloudPlugin.CreateVpnGateway:input_type -> invisinetspb.CreateVpnGatewayRequest
	18, // 16: invisinetspb.CloudPlugin.CreateVpnConnections:input_type -> invisinetspb.CreateVpnConnectionsRequest
	2,  // 17: invisinetspb.Controller.FindUnusedAddressSpace:input_type -> invisinetspb.Namespace
	2,  // 18: invisinetspb.Controller.GetUsedAddressSpaces:input_type -> invisinetspb.Namespace
	23, // 19: invisinetspb.Controller.FindUnusedAsn:input_type -> invisinetspb.FindUnusedAsnRequest
	15, // 20: invisinetspb.Controller.ConnectClouds:input_type -> invisinetspb.ConnectCloudsRequest
	6,  // 21: invisinetspb.CloudPlugin.GetUsedAddressSpaces:output_type -> invisinetspb.AddressSpaceList
	20, // 22: invisinetspb.CloudPlugin.GetUsedAsns:output_type -> invisinetspb.GetUsedAsnsResponse
	22, // 23: invisinetspb.CloudPlugin.GetUsedBgpPeeringIpAddresses:output_type -> invisinetspb.GetUsedBgpPeeringIpAddressesResponse
	3,  // 24: invisinetspb.CloudPlugin.CreateResource:output_type -> invisinetspb.CreateResourceResponse
	14, // 25: invisinetspb.CloudPlugin.GetPermitList:output_type -> invisinetspb.PermitList
	12, // 26: invisinetspb.CloudPlugin.AddPermitListRules:output_type -> invisinetspb.BasicResponse
	12, // 27: invisinetspb.CloudPlugin.DeletePermitListRules:output_type -> invisinetspb.BasicResponse
	17, // 28: invisinetspb.CloudPlugin.CreateVpnGateway:output_type -> invisinetspb.CreateVpnGatewayResponse
	12, // 29: invisinetspb.CloudPlugin.CreateVpnConnections:output_type -> invisinetspb.BasicResponse
	5,  // 30: invisinetspb.Controller.FindUnusedAddressSpace:output_type -> invisinetspb.AddressSpace
	8,  // 31: invisinetspb.Controller.GetUsedAddressSpaces:output_type -> invisinetspb.AddressSpaceMappingList
	24, // 32: invisinetspb.Controller.FindUnusedAsn:output_type -> invisinetspb.FindUnusedAsnResponse
	12, // 33: invisinetspb.Controller.ConnectClouds:output_type -> invisinetspb.BasicResponse
	21, // [21:34] is the sub-list for method output_type
	8,  // [8:21] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_invisinets_proto_init() }
func file_invisinets_proto_init() {
	if File_invisinets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_invisinets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvisinetsDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpaceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpaceMappingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceDescriptionString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermitListRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermitList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectCloudsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVpnGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVpnGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVpnConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsedAsnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsedAsnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsedBgpPeeringIpAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsedBgpPeeringIpAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUnusedAsnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_invisinets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUnusedAsnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_invisinets_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_invisinets_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_invisinets_proto_goTypes,
		DependencyIndexes: file_invisinets_proto_depIdxs,
		EnumInfos:         file_invisinets_proto_enumTypes,
		MessageInfos:      file_invisinets_proto_msgTypes,
	}.Build()
	File_invisinets_proto = out.File
	file_invisinets_proto_rawDesc = nil
	file_invisinets_proto_goTypes = nil
	file_invisinets_proto_depIdxs = nil
}

/*
Copyright 2023 The Paraglider Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package paragliderpb;
import "google/protobuf/empty.proto";

option go_package="github.com/paraglider-project/paraglider/pkg/paragliderpb";

service CloudPlugin {
    rpc GetUsedAddressSpaces(GetUsedAddressSpacesRequest) returns (GetUsedAddressSpacesResponse) {}
    rpc GetUsedAsns(GetUsedAsnsRequest) returns (GetUsedAsnsResponse) {}
    rpc GetUsedBgpPeeringIpAddresses(GetUsedBgpPeeringIpAddressesRequest) returns (GetUsedBgpPeeringIpAddressesResponse) {}
    rpc CreateResource(CreateResourceRequest) returns (CreateResourceResponse) {}
    rpc AttachResource(AttachResourceRequest) returns (AttachResourceResponse) {}
    rpc GetPermitList(GetPermitListRequest) returns (GetPermitListResponse) {}
    rpc AddPermitListRules(AddPermitListRulesRequest) returns (AddPermitListRulesResponse) {}
    rpc DeletePermitListRules(DeletePermitListRulesRequest) returns (DeletePermitListRulesResponse) {}
    rpc CreateVpnGateway(CreateVpnGatewayRequest) returns (CreateVpnGatewayResponse) {}
    rpc CreateVpnConnections(CreateVpnConnectionsRequest) returns (CreateVpnConnectionsResponse) {}
    rpc GetNetworkAddressSpaces(GetNetworkAddressSpacesRequest) returns (GetNetworkAddressSpacesResponse) {}
}

service Controller {
    rpc FindUnusedAddressSpaces(FindUnusedAddressSpacesRequest) returns (FindUnusedAddressSpacesResponse) {}
    rpc GetUsedAddressSpaces(google.protobuf.Empty) returns (GetUsedAddressSpacesResponse) {} // TODO @seankimkdy: we should rename either this or the CloudPlugin's to not share the same method name
    rpc FindUnusedAsn(FindUnusedAsnRequest) returns (FindUnusedAsnResponse) {}
    rpc ConnectClouds(ConnectCloudsRequest) returns (ConnectCloudsResponse) {}
    rpc SetValue(SetValueRequest) returns (SetValueResponse) {}
    rpc GetValue(GetValueRequest) returns (GetValueResponse) {}
    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {}
}

// Internal message objects
// -------------------------

message Namespace {
    string namespace = 1;
}

// Provides the necessary URI/ID to find the Paraglider networks (eg, subscription + resource group in Azure or project in GCP)
message ParagliderDeployment {
    string id = 1;
    string namespace = 2;
}

message AddressSpaceMapping{
    repeated string address_spaces = 1;
    string cloud = 2;
    string namespace = 3;
    optional string deployment = 4;
}

message ResourceDescriptionString {
    string name = 1;
    string description = 2;
}

enum Direction {
    INBOUND = 0;
    OUTBOUND = 1;
}

// TODO @smcclure20: have a version of this without the tags field to avoid users setting that at all (?)
message PermitListRule {
    string name = 1;
    repeated string targets = 2;
    Direction direction = 3;
    int32 src_port = 4;
    int32 dst_port = 5;
    int32 protocol = 6;
    repeated string tags = 7;
}

// RPC Messages
// ------------

message CreateResourceRequest {
    ParagliderDeployment deployment = 1;
    string name = 2;
    bytes description = 3;
}

message CreateResourceResponse {
    string name = 1;
    string uri = 2;
    string ip = 3;
}

message AttachResourceRequest {
    string namespace = 1;
    string resource = 2;
}

message AttachResourceResponse {
    string name = 1;
    string uri = 2;
    string ip = 3;
}

message AddPermitListRulesRequest {
    string namespace = 1;
    string resource = 2;
    repeated PermitListRule rules = 3;
}

message AddPermitListRulesResponse {
}

message DeletePermitListRulesRequest {
    string namespace = 1;
    string resource = 2;
    repeated string rule_names = 3;
}

message DeletePermitListRulesResponse {
}

message GetPermitListRequest {
    string namespace = 1;
    string resource = 2;
}

message GetPermitListResponse {
    repeated PermitListRule rules = 1;
}

message ConnectCloudsRequest {
    string cloudA = 1;
    string cloudB = 2;
    string cloudANamespace = 3;
    string cloudBNamespace = 4;
    repeated string address_spaces_cloudA = 5; // address spaces in cloud A. Used to support non BGP VPNs
    repeated string address_spaces_cloudB = 6; // address spaces in cloud B. Used to support non BGP VPNs
}

message ConnectCloudsResponse {
}

// TODO @seankimkdy: check naming of all of these to be as cloud neutral as possible
// TODO @seankmkdy: should all methods have a {method name}Request and {method name}Response message buffers

message CreateVpnGatewayRequest {
    ParagliderDeployment deployment = 1;
    string cloud = 2;
    repeated string bgp_peering_ip_addresses = 3;
    string address_space = 4;  // required by IBM to identify the VPN gateway referenced by this request 
}

message CreateVpnGatewayResponse {
    uint32 asn = 1;
    repeated string gateway_ip_addresses = 2;
}

message CreateVpnConnectionsRequest {
    ParagliderDeployment deployment = 1;
    string cloud = 2;
    uint32 asn = 3;
    repeated string gateway_ip_addresses = 4;
    repeated string bgp_ip_addresses = 5;
    string shared_key = 6;
    repeated string remote_addresses = 7;    // addresses in remote cloud. Used to support BGP disabled VPNs
    bool is_bgp_disabled = 8; // indicates whether BGP for peer VPN is disabled.
    string address_space = 9;  // required by IBM to identify the VPN gateway referenced by this request
}

message CreateVpnConnectionsResponse {
}

message GetUsedAddressSpacesRequest{
    repeated ParagliderDeployment deployments = 1;
}

message GetUsedAddressSpacesResponse{
    // NOTE: this is shared by both the CloudPlugin and Controller
    repeated AddressSpaceMapping address_space_mappings = 1;
}

message GetUsedAsnsRequest {
    repeated ParagliderDeployment deployments = 1;
}

message GetUsedAsnsResponse {
    repeated uint32 asns = 1; // Currently APIs only return one ASN since it's per namespace but it may change in the future
}

message GetUsedBgpPeeringIpAddressesRequest {
    repeated ParagliderDeployment deployments = 1;
}

message GetUsedBgpPeeringIpAddressesResponse {
    repeated string ip_addresses = 1;
}

message FindUnusedAddressSpacesRequest {
    repeated int32 sizes = 1;
}

message FindUnusedAddressSpacesResponse {
    repeated string address_spaces = 1;
}

message FindUnusedAsnRequest {

}

message FindUnusedAsnResponse {
    uint32 asn = 1;
}

message SetValueRequest {
    string key = 1;
    string value = 2;
    string cloud = 3;
    string namespace = 4;
}

message SetValueResponse {
}

message GetValueRequest {
    string key = 1;
    string cloud = 2;
    string namespace = 3;
}

message GetValueResponse {
    string value = 1;
}

message DeleteValueRequest {
    string key = 1;
    string cloud = 2;
    string namespace = 3;
}

message DeleteValueResponse {
}


// returns the subnets addresses of the VNet/VPC containing the address space provided by GetResourceSubnetsAddressRequest
message GetNetworkAddressSpacesResponse {
   repeated string address_spaces = 1;
}

message GetNetworkAddressSpacesRequest {
    ParagliderDeployment deployment = 1;
    string address_space = 2;
}